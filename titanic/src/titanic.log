 python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)]
  numpy 1.16.4
 pandas 0.24.2
sklearn 0.21.2
xgboost 0.90
================================================================================
Meet data:
     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
484          485       1.0       1  ...  91.0792   B49         C
511          512       0.0       3  ...   8.0500   NaN         S
94            95       0.0       3  ...   7.2500   NaN         S
125          126       1.0       3  ...  11.2417   NaN         C
344         1236       NaN       3  ...  14.5000   NaN         S

[5 rows x 12 columns]

Types and counts:
       PassengerId Pclass    Name     Sex  ... Embarked      Age Survived   Cabin
dtypes       int64  int64  object  object  ...   object  float64  float64  object
values        1309   1309    1309    1309  ...     1307     1046      891     295
nans             0      0       0       0  ...        2      263      418    1014

[3 rows x 12 columns]


--------------------------------------------------------------------------------
Extract Title from Name:
               Mr  Miss  Mrs  Master  Rev  ...  Mme  Sir  the Countess  Lady  nan
Title object  757   260  197      61    8  ...    1    1             1     1    0

[1 rows x 19 columns] 

Encode categorical 'Title':
               2    1    3   0  nan
Title int32  783  264  201  61    0


--------------------------------------------------------------------------------
Encode categorical 'Sex':
             1    0  nan
Sex int32  843  466    0


--------------------------------------------------------------------------------
Family = SibSp + Parch + 1
                1    2    3   4   6   5   7  11  8  nan
Family int64  790  235  159  43  25  22  16  11  8    0


--------------------------------------------------------------------------------
Encode categorical 'Ticket':
              778  104  775  847  824  459  ...  531  530  529  528  422  nan
Ticket int32   11    8    8    7    7    7  ...    1    1    1    1    1    0

[1 rows x 930 columns]


--------------------------------------------------------------------------------
Infer  Fare
Linear score 0.3379
best params {'learning_rate': 0.4, 'max_depth': 2, 'n_estimators': 160}
Feature importance:
  feature  importance
0  Pclass    0.797082
1  Family    0.118058
2  Ticket    0.084860
XGB score 0.8704


--------------------------------------------------------------------------------
Encode categorical 'Embarked':
                  2.0  0.0  1.0  nan
Embarked float64  914  270  123    2
Infer categorical Embarked
Linear score 0.7099
best params {'learning_rate': 0.4, 'max_depth': 3, 'n_estimators': 300}
Feature importance:
  feature  importance
0  Pclass    0.484204
1  Ticket    0.154701
3    Fare    0.137034
2  Family    0.127719
4   Title    0.096342
XGB score 0.9542
                  2    0    1  nan
Embarked int32  916  270  123    0


--------------------------------------------------------------------------------
Infer  Age
Linear score 0.3581
best params {'learning_rate': 0.08, 'max_depth': 2, 'n_estimators': 120}
Feature importance:
    feature  importance
4     Title    0.378694
0    Pclass    0.327388
2    Family    0.157336
6  Embarked    0.067584
3      Fare    0.040910
1    Ticket    0.027214
5       Sex    0.000874
XGB score 0.4003


--------------------------------------------------------------------------------
Infer categorical Survived
Linear score 0.8324
best params {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 100}
Feature importance:
    feature  importance
5       Sex    0.506974
0    Pclass    0.171610
2    Family    0.087759
4     Title    0.068249
6  Embarked    0.052343
3      Fare    0.039966
1    Ticket    0.039017
7       Age    0.034083
XGB score 0.8659
                  0    1  nan
Survived int32  812  497    0
